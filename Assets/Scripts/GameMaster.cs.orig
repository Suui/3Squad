using UnityEngine;


namespace Medusa
{

    public class GameMaster : MonoBehaviour
    {

        void OnEnable()
        {
            SelectionSM.OnChangingTurn += ChangeTurn;
        }


        void OnDisable()
    {
            SelectionSM.OnChangingTurn -= ChangeTurn;
        }


        public GameObject masterOne;
        public GameObject masterTwo;

        public int startingActionPoints = 5;
        public GameObject masterCellPrefab;
        public GameObject boardCellPrefab;
        public GameObject[] obstaclePrefabs;
        public int obstaclesLimit;
        public int boardRows;
        public int boardColumns;
        public float boardYSize;
        public int seed;

        private Player[] players;

        private BoardGenerator boardGenerator;
        private TurnManagement turnManagement;


        void Awake()
        {
            boardGenerator = new BoardGenerator(boardCellPrefab, boardRows, boardColumns);
            boardGenerator.CreateEmptyBoard(boardYSize);
            boardGenerator.SpawnObstacles(obstaclePrefabs, obstaclesLimit, seed);

            Player playerOne = new Player("Player One!", startingActionPoints);
            Player playerTwo = new Player("Player Two!", startingActionPoints);
            players = new[] { playerOne, playerTwo};

            SetUpMasters();
            SetUpButtons();

            turnManagement = new TurnManagement(players[0], players[1], seed);


            // TODO: Remove testing block when over
            // Test GUI
            GameObject go = Instantiate(Resources.Load("Prefabs/Fox")) as GameObject;
            go.name = "Fox";
            go.transform.position = new Position(0, 0);
            CurrentBoard["tokens"][new Position(0, 0)] = go;

<<<<<<< HEAD
            go.AddComponent<PlayerComponent>();
            go.GetComponent<PlayerComponent>().Player = players[0];
        }


        private void SetUpMasters()
        {
            GameObject master1 = Instantiate(masterOne) as GameObject;
            master1.name = "Master 01";
            master1.transform.position = MasterOnePos;
            CurrentBoard["tokens"][MasterOnePos] = master1;


            GameObject master2 = Instantiate(masterOne) as GameObject;
            master2.name = "Master 02";
            master2.transform.position = MasterOnePos;
            CurrentBoard["tokens"][MasterOnePos] = master2;
        }


        private void SetUpButtons()
        {
            // Exit and EndTurn buttons
            CreateButton("Textures/TestButton", new Vector3(0.9f, 0.9f, 0.0f), "ExitEndTurn", "Exit");
            CreateButton("Textures/TestButton2", new Vector3(0.9f, 0.7f, 0.0f), "ExitEndTurn", "EndTurn");

            // Confirm and Cancel skill buttons
            CreateButton("Textures/TestButton", new Vector3(0.2f, 0.1f, 0.0f), "ConfirmCancel", "Confirm");
            CreateButton("Textures/TestButton2", new Vector3(0.8f, 0.1f, 0.0f), "ConfirmCancel", "Cancel");

            // Hide the Confirm and Cancel skill buttons at first
            foreach (var go in GameObject.FindGameObjectsWithTag("ConfirmCancel"))
                go.GetComponent<GUITexture>().enabled = false;
=======
			GameObject go2 = Instantiate(Resources.Load("Prefabs/Ram")) as GameObject;
			go2.name = "Ram";
			go2.transform.position = new Position(3, 4);
			CurrentBoard["tokens"][new Position(3, 4)] = go2;

			GameObject go3 = Instantiate(Resources.Load("Prefabs/Frog")) as GameObject;
			go3.name = "Frog";
			go3.transform.position = new Position(1, 13);
			CurrentBoard["tokens"][new Position(1, 13)] = go3;

>>>>>>> Skills
        }


        public void ChangeTurn(TurnEvents turnEvents)
        {
            
        }


        public static void CreateButton(string texturePath, Vector3 position, string tag, string id)
        {
            GameObject button = Instantiate(Resources.Load("Prefabs/Button_Template")) as GameObject;
            button.GetComponent<GUITexture>().texture = Resources.Load(texturePath) as Texture2D;
            button.transform.position = position;
            button.tag = tag;

            button.GetComponent<ClickableButton>().Id = id;
        }


        #region Getters and Setters

        public Board CurrentBoard
        {
            get { return boardGenerator.Board; }
        }


        public TurnManagement TurnManagement
        {
            get { return turnManagement; }
        }


        public Player GetPlayerOne
        {
            get { return players[0]; }
        }


        public Player GetPlayerTwo
        {
            get { return players[1]; }
        }


        public Position MasterOnePos
        {
            get { return new Position(CurrentBoard.Rows / 2, - 2); }
        }


        public Position MasterTwoPos
        {
            get { return new Position(CurrentBoard.Rows / 2, CurrentBoard.Columns + 1); }
        }

        #endregion

    }
}